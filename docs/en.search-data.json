{"/docs/":{"data":{"":"This is the place where I keep documentation for various technical things I\nhave come across; technical knowledge that I personally find interesting, that\nnobody else might have documented before.","sections#Sections":" Landchad In times before the modern Internet, nerds on the Internet had their own land, fearlessly running and powering their own services. Here is how you can become a landchad and be the aristocrat that the corporate giants fear. Landprince Being a landchad is hard. Maybe you don't feel like being tied down to a computer in your basement; you're on the move, you got stuff to do, but you still want to self-host. It's still possible, and there are ways. "},"title":"Docs"},"/docs/landchad/":{"data":{"":" What is a landchad? In times before the modern Internet, nerds on the Internet had their own land. They ran their own IRC, BBS, and Usenet servers. Back then, those were really powerful systems that ordinary people hosted within their homes to host messages, forums, and files for hundreds of thousands of users around the globe. They were the landchads; aristocrats of the Internet.\nThe power was within their own hardware and they made their own service. They did not need to pay any Californian company or seek their approval to operate on the Internet. They were the operators; the landchads. In a way, they were the Internet.\nThe aformentioned systems were used to big effect, before corporations realised they could force their square peg through the round hole that was HTTP, and tap into the market of technically unskilled people. Today, those people only need to open up their web browser to do everything that the nerds needed swathes of software and configuration files for. The landchads of the IRCs and Usenet had their lands dry up as the corporations built dams and irrigated their own land. They were cast aside and many became Internet peasants as a result.\nYou can be the new generation of landchads. Arguably it is even easier now to set up powerful services than it was to set up an IRC or BBS server back in the day. You can be the landchad who owns his part of the Internet. All you need is one lazy afternoon to spare on tinkering at your computer, and you will have a working website, chat service, and maybe even more.","building-your-own-platform#Building your own platform":" ejabberd - Federated, easy, quick protocol. A beefed up IRC. git - Self-hosting a version control system cgit - A super fast front-end for git repositories Gitea - Lightweight GitHub-like git web front-end Ergo - Modern IRC software DokuWiki - Simple wiki engine with no databases Pleroma - Federated Twitter-like microblogging platform PeerTube - Federated video sharing platform Beyond this guide Of course, we cannot do the world of self-hosting justice with only this one website. The world of free software is a huge one, so it is simply beyond our ability to document all of it here. However, we hope this is a good start for the Internet peasants to get themselves immersed into this world. Here are some further pointers to get yourself properly established as a landchad.\nOf greatest interest to you would probably be Awesome-Selfhosted, which is a huge repository of all free software (with some exceptions) for self-hosted services. Anything from wiki engines to password managers, you can host it yourself, and Awesome-Selfhosted lists pretty much all of it.\nAwesome-Selfhosted Awesome Sysadmin Linux for Beginners ","getting-started#Getting started":" ✒️ Most of what you will see will be a rehash or direct copy of content from LandChad.net, a website by Luke Smith, dedicated to the same goal of turning Internet peasants into landchads. However, I will be providing my own twist where I found something interesting that’s not covered on that site already. Many services you might want to set up depend on a domain name (e.g. maxwelljensen.eu), so it is advisable to start with setting up your own domain name and website. This costs pocket change and can take as little as one hour to do. Click on the card below to get started.\nGet a website","maintenace-tips#Maintenace tips":"Tips and articles on mastering your server and learning about Linux systems administration. These are the types of skills that will help you with managing not just the services in this landchad guide, but any Linux-based server and any service it might run.\nMaintaining a server"},"title":"Landchad"},"/docs/landchad/cgit/":{"data":{"":"Once you have your server hosting your git repositories, you might want to allow others to browse your repositories on the web. cgit is a Free Software that allows browsing git repositories through the web.\nNote that cgit is a read-only frontend for Git repositories and doesn’t have issues, pull requests or user management. If that’s what you want, consider installing Gitea instead.\nHere is what cgit looks like. It is by design basic.\n⚠️ The following guide is for Debian only. On Fedora the processes and scripts involved differ significantly. If you want a guide for Fedora, you will need to find it elsewhere. ","configuring-cgit#Configuring cgit":"You've got cgit up and running now, but you'll probably see it without any style and without any repository. To change this, we need to configure Cgit to our liking, by editing /etc/cgitrc.\ncss=/cgit.css logo=/cgit.svg virtual-root=/ clone-prefix=https://git.example.org # Title and description shown on top of each page root-title=Chad's git server root-desc=A web interface to LandChad's git repositories, powered by Cgit # The location where git repos are stored on the server scan-path=/srv/git/ This configuration assumes you followed the git hosting guide and store your repositories on the /srv/git/ directory.\nCgit's configuration allows changing many settings, as documented on the cgitrc(5) manpage installed with Cgit.\nChanging the displayed repository owner Cgit's main page shows each repo's owner, which is \"git\" in case you followed the git hosting guide, but you might want to change the name to yours. Cgit shows the owner's system name, so you need to modify the git user to give it your name:\nusermod -c \"Your Name\" git Changing the repository description Navigate to your bare repository on the server and edit the description file inside it\nDisplaying the repository idle time To do this, we need to create a post-receive hook for each repository that updates the file cgit uses to determine the idle time. Inside your repository, create a file hooks/post-receive and add the following contents:\n#!/bin/sh agefile=\"$(git rev-parse --git-dir)\"/info/web/last-modified mkdir -p \"$(dirname \"$agefile\")\" \u0026\u0026 git for-each-ref \\ --sort=-authordate --count=1 \\ --format='%(authordate:iso8601)' \\ \u003e\"$agefile\" And give it execution permissions with:\nchmod +x hooks/post-receive Next time you push to that repository, the idle time should reset and show the correct value.","contribution#Contribution":" Ariel Costas – website ","installing-cgit-and-fcgiwrap#Installing cgit and fcgiwrap":"Nginx doesn’t have the capability to run CGI scripts by itself, it depends on an intermediate layer like fcgiwrap to run CGI scripts like cgit:\napt install fcgiwrap And now we can install cgit itself with:\napt install cgit ","setting-up-nginx#Setting up Nginx":"You should have an Nginx server running with a TLS certificate by now. Add the following configuration to your server to pass the requests to Cgit, while serving static files directly:\nserver { listen 443 ssl; listen [::]:443 ssl; ssl_certificate /etc/ssl/nginx/git.example.org.crt; ssl_certificate_key /etc/ssl/nginx/git.example.org.key; server_name git.example.org; root /usr/share/cgit ; try_files $uri @cgit ; location ~ /.+/(info/refs|git-upload-pack) { include fastcgi_params; fastcgi_param SCRIPT_FILENAME /usr/lib/git-core/git-http-backend; fastcgi_param PATH_INFO $uri; fastcgi_param GIT_HTTP_EXPORT_ALL 1; fastcgi_param GIT_PROJECT_ROOT /srv/git; fastcgi_param HOME /srv/git; fastcgi_pass unix:/run/fcgiwrap.socket; } location @cgit { include fastcgi_params; fastcgi_param SCRIPT_FILENAME /usr/lib/cgit/cgit.cgi; fastcgi_param PATH_INFO $uri; fastcgi_param QUERY_STRING $args; fastcgi_param HTTP_HOST $server_name; fastcgi_pass unix:/run/fcgiwrap.socket; } } Then get Nginx to reload your configuration. This configuration also enables cloning via HTTPS, so make sure to point the fastcgi_param GIT_PROJECT_ROOT to the directory where you store your repositories."},"title":"cgit"},"/docs/landchad/dokuwiki/":{"data":{"":"DokuWiki is simple wiki software. Although there are many other wiki platforms, DokuWiki is probably the simplest one to use. It is also not too resource-hungry, unlike most other dynamic web platforms, meaning it should comfortably fit on your 512 MB RAM VPS or machine.\nDokuWiki’s official website itself uses DokuWiki, and here’s what it looks like.","contribution#Contribution":" Adachi ","installation#Installation":" DebianFedora Although DokuWiki is available on the main Debian repos, it is outdated and has a different directory structure, which may lead to problems with plugins and make it harder to follow the official documentation, so we’re gonna install it from a tarball.\nFirst, install the dependencies.\napt install nginx php php-fpm php-xml php-mbstring php-zip php-intl php-gd Now, get the tarball.\nwget https://download.dokuwiki.org/src/dokuwiki/dokuwiki-stable.tgz tar xzvf dokuwiki-stable.tgz mv dokuwiki-*a /var/www/dokuwiki chown -R www-data:www-data /var/www/dokuwiki DokuWiki is available in Fedora repositories. Install it using the following command:\nsudo dnf install dokuwiki ","nginx-configuration#Nginx Configuration":"Create a file named /etc/nginx/sites-available/dokuwiki using your favorite text editor and add the following lines, based on the configuration here. Remember to change wiki.example.org to your website’s name. Also, pay attention to the lines containing client_max_body_size, which determines the maximum file size allowed for uploads, and the first location line, because it needs to be commented during the installation and uncommented when it’s done.\nserver { listen 80; listen [::]:80; server_name wiki.example.org; # Maximum file upload size is 4MB - change accordingly if needed client_max_body_size 4M; client_body_buffer_size 128k; root /var/www/dokuwiki; index doku.php; #Remember to comment the below out when you're installing, and uncomment it when done. #location ~ /(conf/|bin/|inc/|vendor/|install.php) { deny all; } #Support for X-Accel-Redirect location ~ ^/data/ { internal ; } location ~ ^/lib.*\\.(js|css|gif|png|ico|jpg|jpeg)$ { expires 365d; } location / { try_files $uri $uri/ @dokuwiki; } location @dokuwiki { # rewrites \"doku.php/\" out of the URLs if you set the userwrite setting to .htaccess in dokuwiki config page rewrite ^/_media/(.*) /lib/exe/fetch.php?media=$1 last; rewrite ^/_detail/(.*) /lib/exe/detail.php?media=$1 last; rewrite ^/_export/([^/]+)/(.*) /doku.php?do=export_$1\u0026id=$2 last; rewrite ^/(.*) /doku.php?id=$1\u0026$args last; } location ~ \\.php$ { try_files $uri $uri/ /doku.php; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param REDIRECT_STATUS 200; fastcgi_pass unix:/var/run/php/php-fpm.sock; # fastcgi_pass unix:/var/run/php5-fpm.sock; #old php version } } Enable the website.\nln -s /etc/nginx/sites-available/dokuwiki /etc/nginx/sites-enabled/ Generate a SSL certificate for the subdomain.\ncertbot --nginx Restart nginx and php in order for the changes to take effect.\nsystemctl restart nginx \u0026\u0026 systemctl restart php7.4-fpm Finally, go to wiki.yourwebsite.com/install.php to finish the installation process. Read up the documentation in order to understand what each of those itens mean.\nOnce that’s done, remember to uncomment the location line on the nginx configuration file. Open /etc/nginx/sites-available/dokuwiki with a text editor and remove the “#” symbol at the beginning of the line.\n#Remember to comment the below out when you're installing, and uncomment it when done. location ~ /(conf/|bin/|inc/|vendor/|install.php) { deny all; } Reload nginx once again for the changes to take effect.\nsystemctl restart nginx Your wiki is now live! Have fun and happy hacking."},"title":"DokuWiki"},"/docs/landchad/ejabberd/":{"data":{"":"ejabberd is a free XMPP server. It’s a program that runs on your server and enables communication via instant messaging, chat, and presence information. In simpler terms, it’s the server part of the equation that makes XMPP possible.\nXMPP (Extensible Messaging and Presence Protocol) is a communication protocol used for instant messaging, presence, and other related applications. It’s the underlying technology that allows users of different clients/programs to communicate with each other even if they are using different software. This is known as federation.\nWhat is federation? Federation allows separate deployments of a communication service to communicate with each other - for instance a mail server run by Google federates with a mail server run by Microsoft when you send email from @gmail.com to @hotmail.com.\nInteroperable clients may simply be running on the same deployment - whereas in federation the deployments themselves are exchanging data in a compatible manner.\nXMPP provides open federation - meaning that anyone on the internet can join into the XMPP ecosystem by deploying their own server. Credentials from your own server can be used as valid credentials on a different, totally unrelated server.","configuration#Configuration":"The ejabberd server is configured in /etc/ejabberd/ejabberd.yml on Debian, or /opt/ejabberd/conf/ejabberd.yml on Fedora. Changes are only applied by restarting the ejabberd service in systemd:\nsystemctl restart ejabberd Everything is done through this configuration file. Unlike many other programs which typically have two or more configuration files, ejabberd is controlled through one.\nHostnames The XMPP hostname is specified in the hosts section of ejabberd.yml:\nhosts: - example.org Certificates ejabberd doesn’t come equipped with a script that can automatically copy over the relevant certificates to a directory where the ejabberd user can read them.\nOne way of organizing certificates for ejabberd is to have them stored in /etc/ejabberd/certs, with each domain having a separate directory for both the fullchain cert and private key.\nUsing certbot, this process can be easily automated with these commands:\nDOMAIN=example.org certbot --nginx -d $DOMAIN certonly mkdir -p /etc/ejabberd/certs/$DOMAIN cp /etc/letsencrypt/live/$DOMAIN/fullchain.pem /etc/ejabberd/certs/$DOMAIN cp /etc/letsencrypt/live/$DOMAIN/privkey.pem /etc/ejabberd/certs/$DOMAIN ℹ️ You might want to write this script to a file and setup a cronjob to run it periodically. This should help prevent your certificates from expiring. Make sure all the certificates are readable by the ejabberd user:\nchown -R ejabberd:ejabberd /etc/ejabberd/certs To enable the use of all these certificates in ejabberd, the following configuration is necessary:\ncertfiles: - \"/etc/ejabberd/certs/*/*.pem\" Admin user The admin user can be specified in ejabberd.yml under the acl section:\nacl: admin: user: admin This would make admin@example.org the user with administrator privileges. This is how login credentials look in XMPP, which might look strange if never used IRC before, and are used to how modern software operates.\nFile uploads To ensure full compliance with XMPP standards, add the following configuration to mod_http_upload:\nmod_http_upload: put_url: https://@HOST@:5443/upload docroot: /var/www/upload custom_headers: \"Access-Control-Allow-Origin\": \"https://@HOST@\" \"Access-Control-Allow-Methods\": \"GET,HEAD,PUT,OPTIONS\" \"Access-Control-Allow-Headers\": \"Content-Type\" Make sure to create and give the ejabberd user ownership of /var/www/upload or any other directory you choose to use for file uploads:\nchown -R ejabberd:ejabberd /var/www/upload Message archives The ejabberd server supports keeping archives of messages through its mod_mam module. This can be enabled by uncommenting the following lines:\nmod_mam: assume_mam_usage: true default: always It’s disabled by default, in line with the philosophy that privacy should be opted out of, not into.\nDatabase We can find the following comment in the mod_mam section of the configuration file:\nmod_mam: ## Mnesia is limited to 2GB, better to use an SQL backend ## For small servers SQLite is a good fit and is very easy ## to configure. Uncomment this when you have SQL configured: ## db_type: sql As these comments imply, an SQL backend is recommended if you wish to use your ejabberd server for anything more than just testing. Ejabberd supports MySQL, SQLite and PostgreSQL.\nSetting up SQLite for ejabberd is very simple. Add the following lines somewhere in your configuration. These are top-level configuration (you don’t put them under anything else):\ndefault_db: sql sql_type: sqlite sql_database: /var/ejabberd/ejabberd.db The sql_database entry can of course be any directory and file name you like. Make sure the ejabberd user has permissions for that directory.\nLastly, your server will need the SQLite runtime libraries.\nDebianFedora apt install sqlite3 sudo dnf install sqlite ","going-from-here#Going from here":"This guide is less of a comprehensive resource for everything ejabberd-related and more of a springboard towards getting you started as a landchad; who can run his own federated chat.\nFor a deeper look into all the modules and options, have a look at the following ejabberd documentation and concepts:\nModulesTop-level OptionsListen Modules In ejabberd, everything is loaded as and managed by modules. All the available ejabberd modules and their documentation can be read here Some options for ejabberd are not dependent on any module and affect the whole program. These can be found here Lastly, there are what ejabberd calls listen modules. These modules allow you to simply spread the networking part of the program: which module uses which port, subdomain, or even IP address. ","installation#Installation":"ejabberd is easiest installed through their official DEB and RPM packages hosted on GitHub. DEB is what you use on Debian, and RPM is what you use on Fedora. Head over to the GitHub page here to install the latest package. For instance, if you run Debian on an x86_64 machine, you download the ejabberd_xx.yy-z_amd64.deb package. Thereafter, you run the following commands in the directory where you downloaded your package:\nDebianFedora apt install ./ejabberd_xx.yy-z_amd64.deb Download the RPM package instead of DEB. Otherwise the steps are the same.\nsudo dnf install ./ejabberd_xx.yy-z_amd64.rpm More information on the official documentation page. There are also Docker images and Linux distribution packages, but those are either outdated or complicated compared to simply getting the official ejabberd packages from GitHub.","reviewing-the-clients#Reviewing the clients":"After following this guide, you should have an ejabberd server up and running. However, this is just the server. We of course need a client to go with it. Because, as said, XMPP is an open protocol, anyone can make any server and client implementation. Strangely, the mobile clients are the best, while there is only one graphical desktop program that is serviceable, and it is middling. Only mobile clients support voice chat.\nAs of the latest update of this article, the following clients are available:\nWeb Converse.js Desktop Gajim (GUI) Profanity (CLI) Android Cheogram Conversations iOS and macOS Monal IM The XMPP project, sponsored by the company behind ejabberd and others, maintains an interactive list of available clients for XMPP. However, the above list lists the only serviceable clients. All others are poor or abandonware, at least for now.","using-ejabberd#Using ejabberd":"To begin using ejabberd, firstly start the ejabberd daemon:\nsystemctl start ejabberd Then, using ejabberdctl as the ejabberd user, register the admin user which is set in the configuration file:\nsu -c \"ejabberdctl register admin example.org password\" ejabberd This will create the user admin@example.org.\nWeb admin interface By default, ejabberd has a web interface accessible from http://example.org:5280/admin. When accessing this interface, you will be prompted for the admin credentials:\nAfter signing in with the admin credentials, you will be able to manage your ejabberd server from this web interface:"},"title":"ejabberd"},"/docs/landchad/ergo/":{"data":{"":"","configuring#Configuring Ergo":"","contribution#Contribution":" Termer ","installing#Installing an IRCd":"","moderation#Moderation":"Like any chat, there will come a point where you need to use moderation tools to keep things under control. Many IRC setup guides do not go over moderation, so it can be stressful when operators need to actually use moderation tools.\nThe main difference between IRC and other chat systems in terms of moderation is the difference between channel bans and network bans. Channel ban keeps a person out of channel a channel, whereas a network ban keeps a person out of the entire network.\nUnderstanding masks Bans are applied \"masks\", which are formatted pieces of text that contain a user's nick (username), their realname value, and their IP address or host.\nThis is what a mask looks like: nick!~nick-dude@127.0.0.1.\nIn bans, asterisks can be used as wildcards, which is useful for banning IP address ranges, patterns of nicknames, or whatever else you can think of.\nA ban on the nick person, for example, would look like this: person!*@*.\nA ban on anyone with the IP address 127.0.0.1 would look like this: *!*@127.0.0.1\nDiscovering real IPs Even if IP cloaking is enabled on your network, you can still obtain real IP addresses/hosts if you are an operator. See the Operators part of the configuration section of this guide on how to become an operator.\nTo find out a user's real IP, simply type /whois along with the user's nick, and you will see information about the user, along with their real IP address/host.\n/whois is not a command that is exclusive to operators, but it does not reveal as much information to non-operators.\nBanning someone from the network Any netword-wide moderation action requires being an operator. See the Operators part of the configuration section of this guide on how to become an operator.\nBanning someone from the network is achieved with the /kline command. To see more info on the command, type /helpop kline.\\\nTo ban a nick from the network:\n/kline andkill \u003cnick\u003e!*@* To ban an IP address or host from the network:\n/kline andkill *!*@\u003cIP or mask\u003e To unban a mask, you can use the /unkline command with the mask you want to unban.\nBanning someone from a channel Channel owners, administrators, and operators can ban people from channels. This is not the same as banning someone from the network, since it only has an effect on one channel. Additionally, a channel operator is not the same as a network operator.\nTo ban someone in a channel, type the following in that channel, replacing \u003cmask\u003e with the user's mask:\n/mode +b \u003cmask\u003e Note that this will only ban the user, not kick them immediately. You will want to run /kick along with the user's nick to also kick them.\nTo unban a user, run the command above, but replace the + with a -.\nYou can see who is banned in a channel by typing /banlist.\nMuting people in a channel By default, anyone can speak in an IRC channel. To change this, you must be a channel owner, administrator, or operator.\nChannels, along with users, have modes, which modify their behavior. There is a special mode for channels called m (moderated) which requires users to be privileged in some way to talk.\nTo set a channel as moderated, type the following in the channel:\n/mode +m Now, users must be an owner, administrator, operator, or be voiced to talk in the channel This be reversed by typing the command above, but changing the + to a -.\nTo voice a user, run the following, replacing \u003cnick\u003e with the user's nick:\n/mode +v \u003cnick\u003e Unvoice the user by typing the above command, but replacing the + with a -.\nAppointing channel administrators and operators Assuming you a channel owner, you can appoint both administrators and operators. If you are only an operator, you may only appoint operators.\nThe difference between administrator and operator is mainly that administrators cannot have their privileges taken away by operators, only owners. To appoint an administrator, type the following, replacing \u003cnick\u003e with the user's nick:\n/mode +a \u003cnick\u003e To appoint an operator, type the following, replacing \u003cnick\u003e with the user's nick:\n/mode +o \u003cnick\u003e You can also use /op and /deop on most clients to appoint and remove an operator.\nTo remove administrator or operator status, run either of the above commands, but replace the + with a -.\nBringing modern-day features to IRC with TheLounge A large downside to IRC as a protocol is just how old it is, and the limitations that exist because of it. Other old protocols such as HTTP were built to be content-agnostic and versitile, but IRC was built with a very specific set of features, so it has not held up so well to contemporary chat systems.\nA notable thing that IRC as a protocol is missing is file uploads, and other fancy features that many other chats have.\nWith that said, these problems can be fixed by clients, although many clients are still very primitive.\nTheLounge is a modern self-hosted IRC web client that tries to make IRC as user-friendly as possible. It can be the answer to many of the complaints that normalfriends may have about IRC. It runs on anything with a web browser, can be \"installed\" since it is a PWA (Progressive Web App), and is optimized for both desktops and mobile devices. It keeps you logged in even when you are gone, and even supports file uploads and embeds.\nEffectively, it brings IRC up to the standard of most other chat systems.\nIf you would like to setup an instance of TheLounge for you and your friends, you can take a look at their installation guide.\nIt is a self-hosted web app, so you can run it for multiple people, not just yourself.","registering#Registering accounts and channels":"Creating your own chat server for you and your friends is easy, and you don't have to rely on a complicated system to get started.\nHaving a chat server for you and your friends makes it impossible for a group of arbitrarily appointed moderators to deplatform you for wrong-think, and gives you greater freedom of communication. This is a good alternative to ejabberd if you and your friends do not mind minimalism.\nWhat is IRC? Internet Relay Chat, or IRC, is a protocol developed in the late 1980s live interactive Internet text messaging. It’s a fully text-based system that allows for real-time communication. The communication on IRC is structured around “channels”, which are similar to chat rooms and can be created by any user. Users can join multiple channels for different conversations. In addition to group communication, IRC also supports one-on-one messaging. It even allows for file sharing.\nIRC follows a client-server model where users connect to an IRC server using a client, which comes in any form you can imagine due to how long IRC has been around for. IRC servers can be connected to each other to form larger networks, allowing messages to be relayed across multiple servers. Despite the decline in IRC usage since early 2000s, it played a significant role in the early development of Internet communities and has had a lasting impact on Internet communication. Discord, in fact, is wrapped around IRC.\nInstalling an IRCd An IRCd is short for \"IRC daemon\", which just means an IRC server. The most easy IRCd to set up is Ergo.\nThe first thing you need to do is create a new user for the server to be run by. This is good practice for installing software/servers manually, as it give you more fine-grained control over which permissions the application has.\nuseradd -m ergo -s /bin/bash Next, we want to switch to our newly created ergo user and create the server directory.\nsudo -i -u ergo mkdir server You can find the latest release of Ergo on its GitHub latest release page.\nThere are several platforms available, but you want to choose Linux, most likely linux-x86_64.\nOnce you have selected the correct package, copy its URL and replace the release url with the package URL (still as the ergo user):\nwget \"https://github.com/ergochat/ergo/releases/download/v2.10.0/ergo-2.10.0-linux-x86_64.tar.gz\" tar -xf ergo-2.10.0-linux-x86_64.tar.gz mv ergo-2.10.0-linux-x86_64/* rm -r ergo-2.10.0-linux-x86_64* Executing ls -l should now yield something like this:\n-rw-r--r-- 1 ergo ergo 118825 Jun 8 00:51 CHANGELOG.md -rw-r--r-- 1 ergo ergo 1983 May 31 01:48 README -rw-r--r-- 1 ergo ergo 41440 Jun 8 00:42 default.yaml drwxr-xr-x 2 ergo ergo 4096 Jul 1 09:01 docs -rwxr-xr-x 1 ergo ergo 9654272 Jun 8 00:53 ergo -rw-r--r-- 1 ergo ergo 1753 May 31 01:48 ergo.motd drwxr-xr-x 2 ergo ergo 12288 Jul 1 09:01 languages -rw-r--r-- 1 ergo ergo 39722 Jun 8 00:42 traditional.yaml If you see something similar to the above, that means Ergo is installed, although not quite ready to run yet.\nConfiguring Ergo Now that Ergo is installed, you want to configure it to fit the needs of your group.\nThe configuration in this section is tailored towards a small group of people, and less for a possibly large network, but it should work for any size of group.\nFirst thing, make sure you're still using the ergo user, and are in the ~/server directory.\nIf you aren't, you can run the following to get back there:\nsudo -i -u ergo cd ~/server To start configuring, we need to copy some files:\ncp default.yaml ircd.yaml cp ergo.motd ircd.motd Next, generate certificate files for TLS:\n./ergo mkcerts Ergo comes with a default configuration file with detailed documentation that can be used to guide you through the configuration process. This guide will help you setup the server for a typical use-case, but if you see any settings that you would like to change along the way, go ahead and change them, as long as you know what you're doing.\nThe next steps involve editing the newly copied ircd.yaml file. If you do not know how to edit text files from the command line, you can use nano, which is very simple, using arrow keys to navigate, CTRL+O to save, and CTRL+X to exit.\nAnother option is vim, which is a much more powerful text editor, but has a learning curve. It is only recommended for this guide if you already know how to use it.\nLastly, you can copy the ircd.yaml file to a text editor on your computer and edit it with a GUI text editor of your choice. If that is what you choose to do, you may want to just download the file from Ergo's GitHub, edit it on your computer, clear the ircd.yaml file on the server, and then paste the contents from your computer into the blank file.\nNo matter how you do it, the next steps assume you can edit the configuration file.\nNote:\nThe options highlighted in this section are not a complete overview of all options. Instead, the options shown are the ones which are most relevant to a small network.\nYou should read over the configuration file yourself if you are curious about everything you can change.\nNetwork and server names One of the first properties in the config file is network name. You can change this to whatever you like, as it will show up as the name when you connect to the server.\n# network configuration network: # name of the network name: \"Land-Chat\" Change the server name to your server's domain name.\n# server configuration server: # server name name: \"example.org\" Network password The next step is optional, depending on if you want your network password protected or not. The benefit of password protection is fairly obvious; nobody can connect to your network unless you gave them the password. If you're wanting to run a public network which anyone can join and create a channel, you want to skip this, but for personal setups, it is highly recommended.\nGenerate a password to use by executing the following:\n./ergo genpasswd It will ask you to enter a password and confirm it, then you will be given a hashed password.\nCopy this password, and paste it into the following field (also removing the # before the password: line):\n# password to login to the server, generated using `ergo genpasswd`: password: \"your hashed password\" Message of the day (MotD) Change the MotD (Message of the Day) file to the one you copied earlier:\n# motd filename # if you change the motd, you should move it to ircd.motd motd: ircd.motd Feel free to edit ircd.motd to your heart's content. Its contents will be sent to clients when they connect to the network.\nIP limits For security purposes, you might want to limit the amount of client connections per IP. For a private network, 4 is likely the maximum amount of connections you will have per IP, so that is a safe value.\nIf your network is password protected, this is less of an issue, since the only people connecting will be people who have the password. The following is the default, but you can change it to be whichever value you like:\n# IP-based DoS protection ip-limits: # whether to limit the total number of concurrent connections per IP/CIDR count: true # maximum concurrent connections per IP/CIDR max-concurrent-connections: 16 IP cloaking Traditionally, IRC networks expose users' IP addresses to everyone. This is not a good practice for privacy, however. With Ergo, IP cloaking is enable by default. You can enable or disable it if you like, and change how it looks to users.\nIn this case, netname was changed to \"chad\".\n# IP cloaking hides users' IP addresses from other users and from channel admins # (but not from server admins), while still allowing channel admins to ban # offending IP addresses or networks. In place of hostnames derived from reverse # DNS, users see fake domain names like pwbs2ui4377257x8.irc. These names are # generated deterministically from the underlying IP address, but if the underlying # IP is not already known, it is infeasible to recover it from the cloaked name. # If you disable this, you should probably enable lookup-hostnames in its place. ip-cloaking: # whether to enable IP cloaking enabled: true # whether to use these cloak settings (specifically, `netname` and `num-bits`) # to produce unique hostnames for always-on clients. you can enable this even if # you disabled IP cloaking for normal clients above. if this is disabled, # always-on clients will all have an identical hostname (the server name). enabled-for-always-on: true # fake TLD at the end of the hostname, e.g., pwbs2ui4377257x8.irc # you may want to use your network name here netname: \"chad\" Password enforcement adjustments for HexChat (and possibly other clients) Ergo offers account registration to allow users to do things like use history and bouncer features, register channels, etc.\nIn clients such as HexChat, server passwords may conflict with account passwords, so the following setting should be enabled if you wish to use accounts with clients such as HexChat.\nNote that this could under some circumstances be considered a security hazard, as a user with an account does not need to know the server password to connect, although that user would have needed to register an account before the server had a password, and then a password would need to have been set after the fact, so this can be considered a very small concern if your setup has always had a password.\nAlso keep in mind that this setting has no effect if your network does not even have a password at all.\n# some clients (notably Pidgin and Hexchat) offer only a single password field, # which makes it impossible to specify a separate server password (for the PASS # command) and SASL password. if this option is set to true, a client that # successfully authenticates with SASL will not be required to send # PASS as well, so it can be configured to authenticate with SASL only. skip-server-password: true Multiclient, always-on clients, history, etc Traditionally, IRC servers have no message history, and once you close your client, you cannot receive messages, and are not shown to be online at all. Ergo includes functionality to allow users to both receive history, and keep their clients \"online\" even after they have left. It also allows multiple clients to connect to the same account.\nIf you are running a private network for friends, you should set always-on and auto-away to opt-out, to have all users with accounts to appear as if they are online at all times, and be able to receive messages when they are offline.\nFor a public network, keep everything as their default values, since you probably do not want randoms having this by default.\nIf for some reason you do not want any of these features at all, you can set enabled to false, but this is not recommended. Below are the recommended values for a private network (e.g. for friends) where users with accounts will be able to receive messages and history while they are offline.\n# multiclient controls whether Ergo allows multiple connections to # attach to the same client/nickname identity; this is part of the # functionality traditionally provided by a bouncer like ZNC multiclient: # when disabled, each connection must use a separate nickname (as is the # typical behavior of IRC servers). when enabled, a new connection that # has authenticated with SASL can associate itself with an existing # client enabled: true # if this is disabled, clients have to opt in to bouncer functionality # using nickserv or the cap system. if it's enabled, they can opt out # via nickserv allowed-by-default: true # whether to allow clients that remain on the server even # when they have no active connections. The possible values are: # \"disabled\", \"opt-in\", \"opt-out\", or \"mandatory\". always-on: \"opt-out\" # whether to mark always-on clients away when they have no active connections: auto-away: \"opt-out\" # QUIT always-on clients from the server if they go this long without connecting # (use 0 or omit for no expiration): #always-on-expiration: 90d VHosts IP cloaking was mentioned previously, and somewhat related to that, Ergo includes \"vhost\" functionality, which allows users to set a custom IP/host string. This is mostly for cosmetic value, and does not interfere with operators being able to see actual IP addresses for banning, but if you do not want it enable for some reason, you can disable it.\n# vhosts controls the assignment of vhosts (strings displayed in place of the user's # hostname/IP) by the HostServ service vhosts: # are vhosts enabled at all? enabled: true Channels Channels are where everyone on an IRC network talk. By default, anyone can create a channel, and anyone with an account can register one. The difference between a normal channel and a registered one is that the registered one will preserve the operator status of the person who created, whereas a normal channel's owner will lose operator status if they leave the channel or disconnect from the network.\nThere are various settings for channels available, but the defaults are suitable for a private network with trust among users, or where you just want anyone to have the ability to create a channel. Below are the default values:\n# channel options channels: # modes that are set when new channels are created # +n is no-external-messages and +t is op-only-topic # see /QUOTE HELP cmodes for more channel modes default-modes: +nt # how many channels can a client be in at once? max-channels-per-client: 100 # if this is true, new channels can only be created by operators with the # `chanreg` operator capability operator-only-creation: false # channel registration - requires an account registration: # can users register new channels? enabled: true # restrict new channel registrations to operators only? # (operators can then transfer channels to regular users using /CS TRANSFER) operator-only: false # how many channels can each account register? max-channels-per-account: 15 Operators (administrators, etc) The IRC term for an administrator or another privileged user is \"operator\", or \"oper\" for short.\nErgo's opers have different permissions that can be granted to them, and are defined in \"classes\", basically groups of permissions under a name. For example, \"chat-moderator\" and \"server-admin\" are defined in the default configuration:\n# operator classes oper-classes: # chat moderator: can ban/unban users from the server, join channels, # fix mode issues and sort out vhosts. \"chat-moderator\": # title shown in WHOIS title: Chat Moderator # capability names capabilities: - \"kill\" - \"ban\" - \"nofakelag\" - \"roleplay\" - \"relaymsg\" - \"vhosts\" - \"sajoin\" - \"samode\" - \"snomasks\" # server admin: has full control of the ircd, including nickname and # channel registrations \"server-admin\": # title shown in WHOIS title: Server Admin # oper class this extends from extends: \"chat-moderator\" # capability names capabilities: - \"rehash\" - \"accreg\" - \"chanreg\" - \"history\" - \"defcon\" - \"massmessage\" The above can be kept with their default values, but you are free to modify them or create any new classes that are appropriate for your setup.\nNext, let's actually create an operator account:\n# ircd operators opers: # default operator named 'gigachad'; log in with /OPER gigachad \u003cpassword\u003e \"gigachad\": # which capabilities this oper has access to class: \"server-admin\" # custom whois line whois-line: is the server administrator # custom hostname vhost: \"gigachad\" # normally, operator status is visible to unprivileged users in WHO and WHOIS # responses. this can be disabled with 'hidden'. ('hidden' also causes the # 'vhost' line above to be ignored.) hidden: false # modes are modes to auto-set upon opering-up. uncomment this to automatically # enable snomasks (\"server notification masks\" that alert you to server events; # see `/quote help snomasks` while opered-up for more information): #modes: +is acjknoqtuxv # operators can be authenticated either by password (with the /OPER command), # or by certificate fingerprint, or both. if a password hash is set, then a # password is required to oper up (e.g., /OPER dan mypassword). to generate # the hash, use `ergo genpasswd`. password: \"\u003cyour oper password\u003e\" This is a modified version of the default oper entry. The account name is \"gigachad\", but you can change it to anything.\nReplace \u003cyour oper password\u003e with a password generated by ./ergo genpasswd, and you will have a new oper account to use.\nNote that to log into an oper account, clients have to enter /OPER \u003coper name\u003e \u003coper password\u003e each time they log in. This can be automated by most clients by setting the command to be executed when the client logs in. In the case of HexChat, you can edit your network and add the command to the Connect commands tab of the menu.\nYou can copy everything from \"gigachad\" to the end of the line, paste it again, and change the name to create another oper account. Another, less privileged example of an oper is shown as a comment below the above configuration snippet.\nChat history Traditionally, IRC networks do not store, relay, or handle chat history in any way.\nOn a privacy standpoint, this is a good thing, since chats are entirely ephemeral and handled by clients.\nOn a practicality standpoint, this is a bad thing, since people have to keep a client connected 24/7 to see message history.\nFor normalfriends, this can be a big problem, not only because having to stay online 24/7 is just annoying or infeasible, but also because they are likely used to chat platforms that handle history for them.\nWith this in mind, enabling history is a good idea if you want to move friends over to IRC, and will make things a lot more pleasant for private networks.\nErgo's history configuration group is very long, so it is encouraged to read over it yourself. This section will go over the most important pieces of that configuration group.\nHistory is not endless (unless you want it to be), and the amount that can be stored for channels is configurable:\n# how many channel-specific events (messages, joins, parts) should be tracked per channel? channel-length: 2048 History is already enabled by default, but that just means it is being collected, not relayed by default. To relay history to clients when they connect, change the following to the amount of messages that you think is appropriate:\n# number of messages to automatically play back on channel join (0 to disable): autoreplay-on-join: 250 History older than a certain time can be configured to be deleted or be inaccessible. The default cutoff time is 1 week, but this is configurable as well.\n# options to delete old messages, or prevent them from being retrieved restrictions: # if this is set, messages older than this cannot be retrieved by anyone # (and will eventually be deleted from persistent storage, if that's enabled) expire-time: 1w By default, Ergo only stores chat history in memory, so when the server restarts, all history is lost. If you wish to have chat history persist beyond restarts, you must store it in a MySQL database:\n# options to store history messages in a persistent database (currently only MySQL). # in order to enable any of this functionality, you must configure a MySQL server # in the `datastore.mysql` section. persistent: enabled: true # store unregistered channel messages in the persistent database? unregistered-channels: true # connection information for MySQL (currently only used for persistent history): mysql: enabled: false host: \"localhost\" port: 3306 # if socket-path is set, it will be used instead of host:port #socket-path: \"/var/run/mysqld/mysqld.sock\" user: \"ergo\" password: \"hunter2\" history-database: \"ergo_history\" timeout: 3s max-conns: 4 # this may be necessary to prevent middleware from closing your connections: #conn-max-lifetime: 180s For privacy reasons, you may want to allow users to delete their own messages in history, or export their messages to JSON:\n# options to control how messages are stored and deleted: retention: # allow users to delete their own messages from history? allow-individual-delete: true # if persistent history is enabled, create additional index tables, # allowing deletion of JSON export of an account's messages. this # may be needed for compliance with data privacy regulations. enable-account-indexing: true Spam reduction Most IRC networks have measures in place to reduce chat spam. By default, \"fakelag\" is enabled in Ergo, and that can deal with most aggregious chat spam.\nIf you are running a private network where user trust is high, you can disable it so that there are no limits on the speed that messages can be sent.\n# fakelag: prevents clients from spamming commands too rapidly fakelag: # whether to enforce fakelag enabled: true # time unit for counting command rates window: 1s # clients can send this many commands without fakelag being imposed burst-limit: 5 # once clients have exceeded their burst allowance, they can send only # this many commands per `window`: messages-per-window: 2 # client status resets to the default state if they go this long without # sending any commands: cooldown: 2s Starting and using your server Now that Ergo is both installed and configured, you can actually start using it!\nStarting the server First thing, make sure you're still using the ergo user, and are in the ~/server directory.\nIf you aren't, you can run the following to get back there:\nsudo -i -u ergo cd server Starting the server is done in one command:\n./ergo run It will stay online until you close the terminal, or press CTRL+C. Don't worry, the next section goes over how to make it run like a normal server with a systemd service.\nIf you have not already, make sure the port 6697 is not blocked on your server. If you are using UFW as your firewall, you need to run ufw enable 6697 (not as the ergo user, of course).\nIf you make and configuration changes while the server is running, you can apply them without restarting by typing /rehash as an operator.\nConnecting to the server To use IRC, you of course need an IRC client. There are many choices available, but the most widely used for Windows and Linux is HexChat. On Mac, you have a slightly nicer option with Textual, although you have to compile it from source if you want to use it for free.\nA more user-friendly and modern client choice is TheLounge, which is explained in the last section of this guide, if you want to look into it.\nConnecting with HexChat is very easy. When you start it, you will see something like this:\nFrom there, you should click + Add and name the server whatever you like (so you can find it on the server list).\nOnce you have created a new server and named it, select it and click Edit.... A menu will show up like the one below. Change the domain to whatever domain your server is running on, and make sure to put in your server password if you set one.\nOnce you're done editing the network, click (X) Close, select your network from the network list, and click Connect. If all is well, you should be connected!\nThe process is very similar on Textual.\nCreate a new network and connect to it. Note that it will ask if you want to connect even though the certificate is unsigned. This is due to the self-signed certificates generated for the server, and is not a problem or security vulnerability, it is just a little annoying.\nSurviving restarts with a systemd service In the beginning of the last section, Ergo was started by simply running ./ergo run, but this is only suitable for testing. To have a proper server setup, you need to run it as a service. This can be achieved via a systemd service.\nBefore creating your service file, make sure you are in ~/server as the ergo user.\nOnce you have done that, create a file called start.sh with the following content:\n#!/bin/bash ./ergo run Save the file, then mark it as executable:\nchmod +x start.sh Now, create a file called ergo.service with the following content:\n[Unit] Description=Ergo IRC server After=network.target # If you are using MySQL for history storage, comment out the above line # and uncomment these two instead (you must independently install and configure # MySQL for your system): # Wants=mysql.service # After=network.target mysql.service [Service] Type=simple User=ergo WorkingDirectory=/home/ergo/server ExecStart=/home/ergo/server/start.sh ExecReload=/bin/kill -HUP $MAINPID Restart=on-failure LimitNOFILE=1048576 # Uncomment this for a hidden service: # PrivateNetwork=true [Install] WantedBy=multi-user.target You now have your service file, but it is not installed yet. To install it, switch to your normal user, and execute the following lines to install, enable, and start the systemd service:\nln -s /home/ergo/server/ergo.service /etc/systemd/system/ergo.service systemctl enable ergo systemctl start ergo Ergo is now installed and running as a service, and will automatically start when the system boots.\nRegistering accounts and channels Account and channel registration were mentioned multiple times in this guide, and are indeed very important parts of the modern IRC ecosystem. You can connect to most IRC networks and talk without creating an account, but you will not be able to reserve your nickname or register channels, so it is important to register an account.\nRegistering an account with NickServ First, make sure you are connected to your IRC network. Once you are, type /nickserv help to make sure NickServ (the registration system) is working propertly.\nIf all is well, type the following, replacing \u003cyour password\u003e with the password you want to use:\n/nickserv register \u003cyour password\u003e At this point, you are now registered!\nThe final step is to configure authentication with your client.\nIn HexChat, all that needs to be done is changing Login method to SASL (username + password), and entering your NickServ password that you used earlier into the password field:\nIn Textual, open up your network in the menu, and click Identity under Server Properties. Enter your password in Personal Password, and check Wait for identification before joining channels.\nYou will now be logged into your account when you connect to your network.\nRegistering channels with ChanServ Once you have an account registered, you can register channels with ChanServ.\nTo do so, join the channel you want to register, then type the following, replacing \u003cyour channel\u003e with the name of the channel you want to register:\n/chanserv register #\u003cyour channel\u003e You are now the channel owner, and are free to appoint operators, administrators, etc for it. When you go offline, you won't lose ownership, and you cannot be removed as the owner unless you unregister the channel later.","starting-and-using-your-server#Starting and using your server":""},"title":"Ergo"},"/docs/landchad/get_a_website/":{"data":{"":"This is the basic “course.” Follow this quick tutorial and you’ll have a fully functioning basic web page and server on the domain name of your choice.\nℹ️ Domain name: The name of a website that you type in an address bar. This site’s domain name is maxwelljensen.eu. Top-level domain (TLD): The extension of a domain name, like .com, .net, .eu, etc. Registrar: A service authorized to reserve a domain name for you. ","domain-and-dns-records#Domain and DNS Records":"Now that we have a domain and a server, we can connect the two using DNS records. DNS records, which stands for domain name system records, are usually put into your registrar and direct people looking up your website to the server where your website and other things will be.\nGet your IPv4/IPv6 addresses from your VPS provider and put them into A/AAAA records on your registrar. Simple process, takes a minute, but here’s a guide with a million images just so you know.\nAgain, the details will vary from provider to provider, but the general principle is exactly the same at all of them. It is easy.\nOpen your registrar As before, we will be using any registrar of your choice and Vultr as a server host. Go ahead and log into your accounts on both. Open up your registrar’s website, logging into their DNS record management system, and click on your domain. Then, pick a choice for “DNS records.” You’ll want to see something like this on your registrar’s site.\nNote that we are on the “External Hosts (A, AAAA)” tab by default. There may be default settings set by your registrar. If there are, you can go ahead and delete them so they look clean like the picture above.\nAll we have to do now is get our IP addresses from Vultr and add new DNS records that will send connections to our server.\nKeep the registrar tab open, open Vultr’s website, and we will copy-and-paste our VPS’s IP addresses in.\nYour IP address Looking at your server in the Vultr menu, you should see a number next to it. In the example here it is 104.238.126.105 as you can see below the server name, which we have named landchad.net after the domain we will soon attach to it. That is our IPv4 address.\nCopy your IPv4 address and on your registrar’s site, click the “Add Record” record button and add two A entries pasting in your IPv4 address like we’ve done for ours here.\nWe add two entries. One has nothing written in the “Host” section. This will direct connections to landchad.net over IPv4 to our IP address. The second has an asterisk in the “Host” section. This will direct connections to all possible subdomains to the right place too. For instance, mail.landchad.net, blog.landchad.net, or any other subdomain we might want to add later.\nNow let’s get our IPv6 address, which is a little more hidden for some reason. IPv6 is important because we are running out of IPv4 addresses, so it is highly important to allow connections via IPv6 as it will be standard in the future. Anyway, now back on Vultr, click on the server name.\nOn the server settings, click on settings and we will see we are on a submenu labeled “IPv4” where we see our IPv4 address again.\nNow just click on the IPv6 submenu to reveal your IPv6 address.\nThat ugly looking sequence of numbers and letters with colons in between (2001:19f0:5:ccc:5400:03ff:fe58:324a) is our IPv6 address. Yours will look something like it. Now let’s put it into your registrar’s site. This time, be sure to select to put in AAAA records as below:\nNow just click “Save Changes.” It might take a whilte for the DNS settings to propagate across the internet. It could take up to an hour, possibly longer or shorter. DNSes around the world operate quickly, but not instanteously, so be patient.\nTest the connection We can check if our domain name works by pinging our domain name, like so:\nAs you can see, our ping to landchad.net is now being directed to 104.238.128.105. That means we have successfully set up our DNS records! You can also run the command host if you have it, which will list both IPv4 and IPv6 addresses for a domain name.","get-a-server#Get a server":"Once you have a domain name, you’ll need a server to host all your website files on. In general, a server is just a computer that is constanly broadcasting some services on the internet.\nServers connected to the internet can be extremely useful with or without proper websites attached to them. You can be your own website, email, file-sharing service and much more.\nAlternatively you can use old hardware in your house, if you have any. A Dell Latitude from 2004 would be perfectly serviceable to host many services, including for instant messaging, conferencing, and more; let alone a website. However, we will assume you do not have surplus hardware around.\nVPS A virtual personal server (VPS) is a very cheap and easy way to get a web server, without you having to buy expensive equipment. There are a lot of online businesses that have massive server farms with great internet connection and big power bills that allow you to rent a VPS in that farm for pocket change.\nA VPS usually costs 5$ a month. Sometimes slightly more, sometimes slightly less. That’s a good price for some Internet real estate, but, in truth, you can host a huge number of websites and services on a single VPS, so you get a lot more. Nothing stops you from hosting a dozen websites, an email server, a chat server and a file-sharing services on one VPS.\nStarting your server in minutes The VPS provider that we’ll be using for this guide is Vultr. Set up an account and get started. There are many VPS providers around, of course, but we will pick one mainly to illustrate how easy it is to get started. You are encouraged to find a VPS provider that is cheapest and offers best services for your particular needs.\nServer location In general, it doesn’t hugely matter what physical location you have your server in. You might theoretically want it close to where you or your audience might be, but if you host a server in Australia for a European audience, they won’t have to be waiting a perceptibly longer time to load the site.\nℹ️ Some locations might have different abilities and plans than others. For example, in Vultr, their New York location has optional DDOS protection and also has some cheaper 3.50$ servers. Operating system For most system administration needs, there are two Linux distributions that are the best: Debian and Fedora. We recommend Fedora as the operating system for your server. For administering a system, it is the most beginner-friendly Linux distribution. However, Debian is potentially better suited if you are planning to host sensitive data on your system, as it is a more “minimalist” system that is explicitly made for hosting servers.\nUltimately, both are valid options and setting up services for either of them follows almost identical steps.\nServer size You finally have a choice in how beefy a server you want. On Vultr, we recommend getting the cheapest option that is not IPv6 only.\nWeb hosting and even moderately complicated sites do not use huge amounts of RAM or CPU power. If you start doing more intensive stuff than hosting some webpages, such as a Matrix server, you can always bump up your plan on Vultr without data loss. It’s not so easy to bump down, however.\nAdditional features On Vultr, there are some final checkboxes you can select additional options. You will want to check Enable IPv6 and also Block Storage Compatible.\nWe will be setting up IPv6, because it’s important for future-proofing your website as more of the web moves to IPv6. Block storage is the ability (if you want) to later rent large storage disks to connect to your VPS. You just might want that as an option, so it’s worth activating now.\nOnce you select those settings, your server will automatically be deployed. Momentarily, you will be able to see your server’s IP addresses which will be used for the next brief step.","going-from-here#Going from here":"You are now a landchad, or at least the beginnings of one. Indeed, installing a website is almost as easy, if not easier, than back in 1999.\nHowever, if you are not familiar with Linux, you just input commands from this guide without understanding much of what they do. To become a proper landchad, you must understand at least the basics of system administration of Linux and what makes it work. This is something that will take a lot longer than a single afternoon, but if you got this far through the guide then you are probably the type of person who is naturally inclined towards this in the first place. Knowing Linux will help you with setting up your server beyond Nginx, and become an even more affluent landchad.\nHere are some resources to help you get started. You could do these as you go along with building up your Internet estate.\nTerminalFilesystemUsers Beginner’s Guide To The Linux Terminal: This video is a good introduction into how to interact with Linux through the terminal. While you do need to know some other things to understand why things are done in a certain way in the terminal, it is a good starting point for someone who is used to graphical interfaces. The Linux Filesystem playlist: This playlist introduces you to the basics of the Linux filesystem and how file permissions work. File permissions in particular are important, because Linux is a system heavily based on files as a fundamental unit of operation. Linux Crash Course - Managing Users: Lastly, this video deals with managing users. Users are the main mechanism in a well-structured Linux system for managing not just humans but services as well. It’s simpler than it might seem at first. ","registering-a-domain-name#Registering a domain name":"When domain names first sell, they usually sell for very cheap, but once someone buys one, they have the rights to it until they decide to sell it, often for much, much more money. Therefore, it’s a good idea to reserve a domain name ASAP, even if you didn’t intend on doing anything big with it.\nSo let’s register your domain name!\nDomains can be registered at any accredited registrar and there are a lot to choose from. Some major names are HostGator, BlueHost, NameCheap or DreamHost.\nThere are also sites that are more private, like Njalla and CheapPrivacy, which register a domain for you under their name, but still allow you access to it. Normally all websites must be registered with the ICANN with a real name and address, but these sites allow you to bypass that.\nChoosing a registrar is not permanent, and you can transfer domains to a different registrar if you get a better deal later, so, in most cases, you can just choose one. Moving on.\nAbout domain names Domain names usually require a very small yearly fee to keep registered, usually around 12$ for most generic TLDs. There are some “specialty” TLDs that are more expensive, but .com, .xyz, .no and other basic TLDs are that cheap. Once you own a domain, it is yours as long as you pay the yearly fee, but you can also sell it to someone for however much you want. Domain names do not hold your data or your website; instead, you add “DNS settings” that direct people connecting to your domain to your IP address. The purpose of a domain name is so that people don’t have to remember your IP address to find your website! Some domain names can be gotten only by fulfilling certain requirements beyond pay. For example, to get a .no domain, you must be a citizen of the Kingdom of Norway. Find a name Most registrars offer a simple search function to look for available domain names on the Internet.\nYou can look for whatever domain name you want. Domains that are already bought and owned by someone else might have the option to “backorder,” but it’s always best to get one that is unowned, like these:\nNote the differences in prices. Some unusual TLDs like .game and .io charge a much larger fee, although you might want one. Some domains like .xyz and .org have dramatically discounted prices, although it typically applies for the first one or two years of subscription.\nChoose the domain you want, and buy it. The process of purchasing is the same as for any other service on the Internet. That’s all you have to do to own a domain name. As you register a domain, you can also setup an automatic payment to pay your fee yearly to keep your domain. Easy.","setting-up-https#Setting up HTTPS":"Once you have a website, it is extremely important to enable encrypted connections over HTTPS. You might have no idea what that means, but it’s easy to do now that we’ve set our web server up.\nWhy bother? You get the official-looking green 🔒 symbol in the URL bar in most browsers which makes non-techies subtly trust your site more. Some browsers might also issue a full-screen warning altogether when your site is not encrypted.\nSome services you might set up make use of SSL certificates that you get for your domain name to encrypt their traffic, not just Nginx.\nWith HTTPS, users’ ISPs cannot snoop on what they are looking at on your website. They know that they have connected, but the particular pages they visit are private as everything is encrypted. HTTPS increases user privacy.\nSearch engines like Google favour pages with HTTPS over unencrypted HTTP.\nCertbot to the rescue Certbot is a program that automatically creates and deploys the certificates that allow encrypted connections. It used to be painful, and often expensive to do this, but now it’s all free and automatic, thanks to the Electronic Frontier Foundation and their Let’s Encrypt initiative.\nThis part of the guide is easy for us, since Certbot’s website has an entire interactive guide that shows you step-by-step exactly what you need to do to have your website certified. Head over there right now and follow their Nginx instructions for your system. This should take you around five minutes.\nBy the end of the setup, Certbot will automatically renew certificates on your system. Previously you had to set up automation for this yourself, but now Certbot truly does everything.\nVerifying success You should now be able to go to your website and see that there is a 🔒 or some other notification that you are now on an encrypted connection.","the-web-server#The web server":"At this point, we should have a domain name and a server and the domain name should direct to the IP address of the server with DNS records. We first want to log into our VPS to get a command prompt where we can set up the web server. We are assuming you are using either macOS or GNU/Linux and you know how to open a terminal. On Windows, you can also use either PuTTY or the Windows Subsystem for Linux (WSL).\nWe will be installing a web server known as Nginx, which is a relatively new but well-tested web server that’s very easy to operate. For our simple uses, it is the best solution.\nNow, on Vultr’s site, you can click on your VPS and you will see that there is an area that shows you the password for your server at the bottom here.\nNow pull up a terminal, type the following, and hit the enter key:\nssh user@example.org In our case, we would use root instead of user, and landchad.net instead of example.org. Use the user name as provided by your VPS. Those are your login credentials for an account on your system of choice.\nThis command will attempt to log into your server. It should prompt you for your password, and you can just copy or type in the password from Vultr’s site.\nIf you get an error here, you might not have done your DNS settings right. Double-check those.\nℹ️ You can also replace the example.org with your VPS’s IP address, but you’ll want to fix your DNS settings soon. Installing the web server If the program runs without an error, ssh has now logged you into your server. Let’s start by running the following commands, depending on which system you have set up for your VPS.\nDebianFedora apt update \u0026\u0026 apt upgrade \u0026\u0026 apt install nginx The first command checks for packages that can be updated and the second command installs any updates.\nThe third command installs nginx, the web server we’ll be using, along with some other programs and bits.\nsudo dnf update \u0026\u0026 sudo dnf install nginx The first command checks for packages that can be updated and checks for any system updates, downloading them. The second command, of course, installs nginx as in Debian.\nConfiguring our Nginx Nginx is your webserver. You can make a little website or page, put it on your VPS and then tell Nginx where it is and how to host it on the Internet. It’s simple. Let’s do it.\nNginx configuration files are in /etc/nginx/. If you are not sure what that means, you might want to watch this three-minute video. The two main subdirectories in there are /etc/nginx/sites-available and /etc/nginx/sites-enabled. The names are descriptive. The idea is that you can make a site configuration file in sites-available and when it’s all ready, you make a link (explained in a bit) to it in sites-enabled which will activate it.\nFirst, let’s create the settings for our website. You can copy and paste, with required changes, but we will also explain what the lines do.\nCreate a file in /etc/nginx/sites-available by doing this:\nnano /etc/nginx/sites-available/mywebsite Note that nano is a noob-friendly command line text editor. You will now be able to create and edit this file. By saving, this file will now appear. Note also we name the file mywebsite, but you can name it whatever you’d like.\nWe’re going to add the following content to the file. The content like this will be different depending on what you want to call your site.\nserver { listen 80 ; listen [::]:80 ; server_name example.org ; root /var/www/mysite ; index index.html index.htm index.nginx-debian.html ; location / { try_files $uri $uri/ =404 ; } } Explaining the configuration The listen lines tell nginx to listen for connections on both IPv4 and IPv6.\nThe server_name is the website that we are looking for. By putting landchad.net here, that means whenever someone connects to this server and is looking for that address, they will be directed to the content in this block.\nroot specifies the directory we’re going to put our website files in. This can theoretically be wherever, but it is conventional to have them in /var/www/. Name the directory in there whatever you want.\nindex determine what the “default” file is; normally when you go to a website, say landchad.net, you are actually going to a file at landchad.net/index.html. That’s all that is. Note that that this in concert with the line above mean that /var/www/landchad/index.html, a file on our computer that we’ll create, will be the main page of our website.\nLastly, the location block is really just telling the server how to look up files, otherwise throw a 404 error. Location settings are very powerful, but this is all we need them for now.\nCreate the data We’ll actually start making a “real” website later, but let’s go ahead and create a little page that will appear when someone looks up the domain.\nmkdir /var/www/mysite Now let’s create an index file inside of that directory, which will appear when the website is accessed:\nnano /var/www/mysite/index.html We’ll add the following basic content, but you can add whatever you want. This will appear on your website.\n\u003c!DOCTYPE html\u003e \u003ch1\u003eMy website!\u003c/h1\u003e \u003cp\u003eThis is my website. Thanks for stopping by!\u003c/p\u003e \u003cp\u003eNow my website is live!\u003c/p\u003e Once you save that file, we can enable it making a link to it in the sites-enabled directory:\nln -s /etc/nginx/sites-available/mywebsite /etc/nginx/sites-enabled Now we can just reload to make Nginx service the new website and its configuration:\nsystemctl reload nginx Note that if you are on Fedora, you will likely have to preface the above command with sudo.\nFirewall configuration Vultr and some other VPSes automatically install and enable a firewall program. This will block basically everything by default, so we have to change that.\nℹ️ There could also be no firewall. If that is the case, the following commands will not work, in which case you may simply skip this step. DebianFedora Debian makes use of what is called ufw. We must open up at least ports 80 and 443 as below:\nufw allow 80 ufw allow 443 Fedora makes use of firewall-cmd. The equivalent of the Debian commands is the following:\nsudo firewall-cmd --permanent --add-service=https sudo firewall-cmd --permanent --add-service=http sudo firewall-cmd --reload Port 80 is the canonical webserver port, while 443 is the port used for encrypted connections. We will certainly need that for the next steps.\nAs you add more services to your website, they might need you to open more ports, but that will be mentioned on individual articles. It should be noted that some local services run only for other services on your machine, so you don’t need to open ports for every process running locally, only those that directly interact with the internet, although it’s common to run those through Nginx for simplicity and security.\nOur website At this point you can now type in your website in your browser and this webpage will appear!\nNote the “Not secure” notification. The next brief step is securing encrypted connections to your website."},"title":"Get a website"},"/docs/landchad/git/":{"data":{"":"If you don’t already know, git is a version control system. It’s a tool that people use to track changes made to files over time. Imagine it like a time machine for your files, where you can go back and see what the files looked like at any point in the past. It’s chiefly used for software projects, but it can be used for anything that is comprised of files and benefits from collaborative work.\nHere’s a simple analogy: Think of git as a very advanced “track changes” feature, like the one you might find in a word processor, but, instead of just tracking changes to one document, git can track changes to entire projects, which can include many different files and directories.\nOnce you have your own VPS or other Internet-available server, you can start hosting your own git repositories. The goal of this tutorial is for you to go from\ngit clone github.com/... to\ngit clone YourLandChadDomainName.xyz/... so you can cultivate your own homegrown, grass-fed code, rather than relying on a centralised proprietary service like GitHub.","contribution#Contribution":" Martin Chrzanowski – website, donate Edits and fixes by Luke. ","creating-a-git-user#Creating a git user":"To prevent exploiting your system, services should usually be run under another user that can only affect the relevant parts of the server. Let’s create a user for git.\nuseradd -m git -d /var/git -s /bin/bash The git user’s home directory will be /var/git and we also set the default user shell as bash instead of sh for ease when on the command line.\nBecome the git user and create the directory If you're logged in to your server as root and have git installed, you can become the git user by executing\nsu -l git The -l option should put us in git’s home directory, but you can cd /var/git otherwise.\nCreate the repo Now you can create the bare repository with\ngit init --bare my-repo.git By convention, bare repository names end with “.git”. A bare repository is just one without the file index, i.e. the familiar browseable file structure. Repeat the above command for any other repositories you want to host.","installing-git#Installing git":"You most likely already have it installed on your server, but if not, run:\nDebianFedora apt install git sudo dnf install git We don't need any additional software, git itself ships with everything needed to host a remote repository!","syncing-local-repositories#Syncing local repositories":"Set up SSH login for the git user Git uses SSH to connect to a server, and we will definitely want to use an SSH key pair that we authorized. This is not only most secure, but also easiest since we don’t need to put in our password whenever we pull or push.\nThere is a brief article on setting up SSH keys. We need to do exactly that, but for the git user, instead of the default root user. Note that if you want to upload your SSH key directly to the git user as in that tutorial, remember to run passwd git to give the git user a password so you can log in.\nIf you’ve already set up password-less SSH log-ins for root (and disabled SSH password authentication), you can run the following commands as root, which will copy over your authorized key to the git user as well.\nmkdir /var/git/.ssh\t# Create the required directory. cp ~/.ssh/authorized_keys /var/git/.ssh/\t# Copy over the authorized key. chown git:git -R /var/git/.ssh\t# Make the created directory and contents to be owned by the git user. Syncing a new repository with your server Now that we’ve set that up, we can push a repository we have on our computer to that newly created bare repo. First, on our local computer, we run a command like this:\ngit remote add origin git@example.org:my-repo.git Note some of the things you will change:\nexample.org, obviously is a stand-in for your domain name. my-repo.git is the name of the repository, but it is also the relative location of it. Since it is in the git user’s home directory, we don’t need anything else, but if you decide to put a git repository elsewhere—like in /var/www/git/stuff.git, you can provide that absolute file location instead. origin is a unique name for your remote repository. Since “origin” is probably already used if you are using Github or another service, you’ll want to change this to whatever you want. Could be myserver or vps or own, as long as it is unique. Once you run that command successfully to add a new remote repository, and also assuming you change origin to let’s say the more unique personal, you can push your local git server as expected:\ngit push personal master That’s all a git server is! Very simple.\nIf you want a minimalist front-end to a git server, follow our guide on cgit. If you want a large and user-friendly Github-like site for your git projects, follow our guide on Gitea!"},"title":"git"},"/docs/landchad/gitea/":{"data":{"":"Gitea allows you to self-host your git repositories similar to bare repositories, but comes with additional features that you might know from GitHub, such as issues, pull requests or multiple users. Its advantage over GitLab – another free software GitHub clone – is that it is much more lightweight and dramatically easier to setup.\nAlthough Gitea is lighter than GitLab, if you have a VPS with only 512MB of RAM, you will probably have to upgrade. Gitea is more memory-intensive than having just a bare git repository. If you just want a minimalist browseable git server without issue tracking and pull requests, install cgit instead.","a-few-extras#A few extras":"Automatically create a new repo on push This is an incredibly useful feature for me. Open up /etc/gitea/app.ini and add DEFAULT_PUSH_CREATE_PRIVATE = true to the repository section like so:\n[repository] ROOT = /var/lib/gitea/data/gitea-repositories DEFAULT_PUSH_CREATE_PRIVATE = true If you now add a remote to a repository like this\ngit remote add origin 'ssh://gitea@git.example.org/username/coolproject.git' and push, Gitea will automatically create a private coolproject repository in your account!\nChange tab-width By default Gitea displays tabs 8 spaces wide. However, some people might prefer 4 spaces, or 2 spaces. We can change this.\nmkdir -p /var/lib/gitea/custom/templates/custom/ And write this into /var/lib/gitea/custom/templates/custom/header.tmpl:\n\u003cstyle\u003e .tab-size-8 { tab-size: 4 !important; -moz-tab-size: 4 !important; } \u003c/style\u003e ","contribution#Contribution":" phire ","installing-gitea#Installing Gitea":"Unfortunately, despite how popular Gitea is, as far as free software goes, it is not available as a DEB package for convenient use in Debian, or RPM in Fedora. However, installing it from a compiled binary is very easy. Follow the official guide that details all the steps of setting it up, then continue this guide.\nIt is of note that the official Gitea documentation is excellent, and accessible even to the most novice of Linux administrators. However, this guide will make sure to get you up to speed with setting it up.","setting-up-a-nginx-reverse-proxy#Setting up a Nginx reverse proxy":"You should know how to generate SSL certificates and use Nginx by now. Add this to your Nginx config to proxy requests made to your git subdomain to Gitea running on port 3000:\nserver { listen 443 ssl; listen [::]:443 ssl; ssl_certificate /etc/ssl/nginx/git.example.org.crt; ssl_certificate_key /etc/ssl/nginx/git.example.org.key; server_name git.example.org; location / { proxy_pass http://localhost:3000/; # The / is important! proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } And reload Nginx:\nsystemctl reload nginx ","setting-up-gitea#Setting up Gitea":"If everything worked fine you should now see a setup screen when you go to your configured domain in the browser. The options should be pretty self-explanatory, it is only important to select SQLite3 and to replace the base url and SSH server domain with your own.\nDatabase Type SQLite3 SSH Server Domain git.example.org Gitea Base URL git.example.org These and other settings can be changed in a configuration file later so don't worry about making wrong decisions right now.\nAfter clicking the install button you should now be able to log into your Gitea instance with the account you just created! Explore the settings for more things to do, such as setting up your SSH keys.\nIf Gitea does not load fully and has random errors, it is possible that you need to increase your available memory on your VPS. This can usually be done on your VPS-provider's website without too much trouble."},"title":"Gitea"},"/docs/landchad/maintenance/":{"data":{"":" Server login with SSH keys Scheduling with cron Optimising the website "},"title":"Maintenace tips"},"/docs/landchad/maintenance/cron/":{"data":{"":"Cron is a service that lets you run scheduled tasks on a computer. These tasks are called cronjobs. If you have already followed the initial course you will have already used cron when you set up Certbot, but we’ll explain how they work generally here.","basic-cronjobs#Basic cronjobs":"This the preferred method for personal tasks and scripts; it's also the easiest to get started with. Run the command crontab -e to access your user's crontab\nOnce you have figured out the command you want to run you need to figure out how often you want to run it and when. I am going to schedule my system updates once a week on at 3:30 AM on Mondays.\nWe now have to convert this time (Every Monday at 3:30 AM) into a cron time. Cron uses a simple but effective way of scheduling when to run things.\nCrontab expressions look like this * * * * * command-to-run The five elements before the command tell when the command is supposed to be run automatically.\nSo for our Monday at 3:30 AM job we would do the following:\n.---------------- minute (0 - 59) | .------------- hour (0 - 23) | | .---------- day of month (1 - 31) | | | .------- month (1 - 12) | | | | .---- day of week (0 - 6) | | | | | * * * * * 30 3 * * 1 apt -y update \u0026\u0026 apt -y upgrade Some notes On the day of the week option, Sunday is 0 and counting up from there, Saturday will be 6. * designates \"everything\". Our command above has a * in the day of month and month columns. This means it will run regardless of the day of the month or month. The hour option uses 24 hour time. 3 = 3AM, while use 15 for 3PM. More examples Let's add another job, our backup job (for the purposes of this our backup command is just called backup). We want to run backup every evening at 11PM. Once we work out the timings for this we can add the to the same file as the above by running crontab -e This would mean our full crontab would look like this:\n0 23 * * * backup Consecutive times Suppose we want a command to run every weekday. We know we can put 1 (Monday), but we can also use 1-5 to signify from day 1 (Monday) to day 5 (Friday).\n0 6 * * 1-5 echo \"Wakey, wakey, wagie!\" \u003e\u003e /home/wagie/alarm The above echo command runs every Monday through Friday at 6:00AM.\nNon-consecutive times We can also randomly specify non-consecutive arguments with a comma. Suppose you have a script you want to run at the midday of the 1st, 15th, and 20th day of every month. You can specify that by putting 1,15,20 for the day of the month argument:\n0 12 1,15,20 * * /usr/bin/pay_bills_script “Every X minutes/days/months” We can also easily run a command every several minutes or months, without specifying the specific times:\n*/15 * * * * updatedb This cronjob will run the updatedb command every 15 minutes.\nBeware of this rookie mistake though… Suppose you want to run a script once every other month. You might be tempted write this:\n* * * */2 * That might feel right, but this script will be running once every minute during that every other month. You should specify the first two arguments, because with * it will be running every minute and hour!\n0 0 1 */2 * This makes the command run only at 0:00 (12:00AM) on the first day of every two months, which is what we really want.\nConsult the website crontab.guru for an intuitive and interactive tester of cronjobs.","contribution#Contribution":" Mark McNally – website, Youtube Edits and examples by Luke ","system-wide-cron-directories#System-wide cron directories":"crontab -e is the typical interface for adding cronjobs, but it's important to at least know that system-wide jobs are often stored in the file directory. Some programs which need cronjobs will automatically install them in the following way.\nRun the command ls /etc/cron* you should see a list of directories and there contents. The directories should be something like the below:\n/etc/cron.d This is a crontab like the ones that you create with crontab -e /etc/cron.hourly /etc/cron.daily /etc/cron.weekly /etc/cron.monthly The directories cron.{hourly,daily,weekly,monthly} are where you can put scripts to run at those times. You don't put normal cron entries here. I prefer to use these directories for system wide jobs that don't relate to an individual user.","user-vs-root-cronjobs#User vs. root cronjobs":"It is important to note that user accounts all have different cronjobs. If you have a user account chad and edit his crontab with crontab -e, the commands you add will be run as the chad user, not root or anyone else.\nBear in mind that if you need root access to run a particular command, you will usually want to add it as root.","what-tasks-would-i-want-to-schedule#What tasks would I want to schedule?":"You can schedule anything! Some examples of what you might have done already include:\nupdatedb to update your locate database to let you quicking search for files certbot to update renewing of your https certs Some tasks that you might want to schedule may include:\nPackage updates - if you really just want to leave your server alone you can automated updating packages on your server Backups - you may want to backup certain files every day and some every week, this is possible with cron And many more, anything you can do can be turned into a cronjob."},"title":"Cronjobs"},"/docs/landchad/maintenance/seo/":{"data":{"":"After you've deployed your website, you may want to consider improving its performance, accessibility, and search-engine optimization (SEO). Doing so can help make your website more user-friendly and increase its page rank in search results. Luckily, Google provides a measurement tool to help you improve these aspects. Start by entering your website's URL and click the Run Audit button (it will take 5-10 seconds to generate the report).\nOnce the report has finished, you'll be greeted by a score for four different categories: Performance, Accessibility, Best Practices, and SEO. A lot of the tests listed are self-explanatory, and Google provides you with articles to help you pass them. Below are some easy ways to improve your scores, some specific to the Nginx configuration used in the landchad website tutorial.","accessibility#Accessibility":"Image elements do not have [alt] attributes It may seem silly to add alt attributes to images, but it helps screen readers convey images to users and can help page rank as a result. The alt attribute should simply describe the image being displayed.\n\u003cimg src=\"img/cabin.webp\" alt=\"A cabin nestled between pine trees\"\u003e ","contribution#Contribution":" Jacob Monero 🪙 82ZfVp7zJWyAoyUGS3FneicmEcov8quPq8Dh7RNqrAwJ8Qz2amFLWNvKvC4atpDPhmDucvhZjWXdLf61ymM19BLR2V581ND ","performance#Performance":"Serving static assets with an efficient cache policy Serving your files with an efficient cache policy will allow the user's browser to cache files such as pictures and CSS so that the browser doesn't need to fetch these files each time the page is visited.\nIt's very easy to set this up in nginx. Just paste the following within the server block of your website's configuration file:\n# Media: images, icons, video, audio, HTC location ~* \\.(?:jpg|jpeg|gif|png|ico|svg|webp)$ { expires 1M; access_log off; # max-age must be in seconds add_header Cache-Control \"max-age=2629746, public\"; } # CSS and Javascript location ~* \\.(?:css|js)$ { expires 1y; access_log off; add_header Cache-Control \"max-age=31556952, public\"; } You can add more types of file extensions (mp3, mp4, ogg) as you see fit.\nIf you're changing your CSS files a lot, caching could keep repeat users from getting the most up-to-date stylesheet. To combat this, you can version your stylesheets like so:\n\u003clink rel=\"stylesheet\" type=\"text/css\" href=\"style.css?v=1.0.0\"\u003e Just increase the version number whenever you update your stylesheet, and the browser will re-update its cache.\nEnable text compression Another easy addition to your websites configuration file. Enabling text compression is easy and will save bandwidth for users. Simply paste the following within the server block of your website's configuration file:\ngzip on; gzip_min_length 1100; gzip_buffers 4 32k; gzip_types text/plain application/x-javascript text/xml text/css; gzip_vary on; After reloading nginx, you can test if compression is working by opening your browsers developer tools and going to the network tab. Refresh your website with the network tab, click on the item with your URL and look at the response headers. You should see Content-Encoding: gzip as one of the headers displayed.\nProperly sizing images If you've put images on your webpage, you've most definitely gotten this warning. To pass this audit, you'll need to scale your images down using a tool like gimp or imagemagick to a size appropriate for your website. It doesn't make much sense to serve a high-res image for images that are rendered much smaller on a webpage.\nOnce you've scaled your image down, you can use a tool like cwebp to convert your images into the .webp format, a format specifically created for serving bandwidth concious images.\nFirst, you'll have to install the webp package:\napt install webp Now you can easily convert your images to webp (keep in mind that it's much more effective to first size your images appropriately before this). Using the below command, you can specify the quality of the photo with the q option. I typically shoot for a quality in the range of 60-80, depending on the image and how large it will be displayed on the webpage.\ncwebp -q 80 your-photo.png -o your-photo.webp You can now check the difference in size of the images using ls.\nls -lh your-photo* After utilizing webp images, the audit typically goes away, but if you didn't scale your image properly before hand, it may still linger.","seo#SEO":"Document does not have a meta description Adding meta descriptions to your webpage allow for web-crawlers and bots to easily determine what content your website contains. Just like on other online platforms, you can give your webpage a long list of keywords to help increase the chance someone stumbles upon your site from a search engine. You don't need to add all of the below meta tags to pass the audit, only add what's necessary.\n\u003c!--- Instructions for web scrapers ---\u003e \u003cmeta name=\"robots\" content=\"index, follow\"\u003e \u003cmeta name=\"description\" content=\"your website description\"\u003e \u003cmeta name=\"keywords\" content=\"your, keywords, here\"\u003e \u003cmeta name=\"author\" content=\"your name\"\u003e \u003c!--- Facebook specific standard, but many websites use this so it has become almost standard to include ---\u003e \u003cmeta property=\"og:site_name\" content=\"Site Name\"\u003e \u003cmeta name=\"twitter:domain\" property=\"twitter:domain\" content=\"example.org\"\u003e \u003cmeta name=\"og:title\" property=\"og:title\" content=\"Site Name\"\u003e \u003cmeta property=\"og:description\" content=\"your website description\"\u003e \u003cmeta name=\"twitter:description\" property=\"twitter:description\" content=\"your website description\"\u003e \u003cmeta name=\"og:image\" content=\"https://link-to-an-image-that-represents-your-site\"\u003e \u003c!--- below is for twitter sharing previews you can test this at cards-dev.twitter.com ---\u003e \u003cmeta property=\"twitter:card\" content=\"https://link-to-an-image-that-represents-your-site\"\u003e \u003cmeta name=\"twitter:image:src\" property=\"twitter:image:src\" content=\"https://link-to-an-image-that-represents-your-site\"\u003e \u003cmeta name=\"twitter:image\" property=\"twitter:image\" content=\"https://link-to-an-image-that-represents-your-site\"\u003e \u003cmeta name=\"og:image:alt\" property=\"og:image:alt\" content=\"alt text for your image\"\u003e \u003cmeta property=\"og:url\" content=\"example.org\"\u003e \u003cmeta property=\"og:type\" content=\"website\"\u003e \u003c!--- If you have accounts on twitter or facebook that are relevant to your site ---\u003e \u003cmeta property=\"fb:admins\" content=\"facebook group\" \u003e \u003cmeta name=\"twitter:site\" property=\"twitter:site\" content=\"@yourTwitterHandle\"\u003e \u003cmeta name=\"twitter:creator\" property=\"twitter:creator\" content=\"@yourTwitterHandle\"\u003e "},"title":"Web optimisation"},"/docs/landchad/maintenance/ssh/":{"data":{"":"Let’s generate and use SSH keys on our computer. This allows us to ensure our identity better than a password ever could. This allows us to do two main things:\nPassword-less login: With SSH keys, we can permanently designate our profile on our local computer as safe for our server, allowing us to bypass password verification when logging into our server. Prevent hacking: Since we no longer need a password to log in, we can simply deactivate password logins on our server altogether, which prevents hacking from people who may be so lucky as to guess our password! In other words, using an SSH key to login is both safer, faster and easier.\nThis is especially useful once you start making scripts on your computer that interact with your server. You can upload files in the background, edit your spam filters or anything else from your local computer without having to input your password each time you touch the server.","disabling-password-logins-for-security#Disabling Password Logins for Security":"Once we have authorized ssh keys for all the devices we need, we can actually just disable password logins. If you’ve ever looked at your system logs (journalctl -xe) you will find that there are always hundreds of random Chinese computers trying to brute force every server connected to the internet with random passwords. They are usually unsuccessful, but let’s make it impossible for them.\nLog into your server and open the /etc/ssh/sshd_config file. Here we can set settings for our SSH daemon that receives SSH requests.\nNow find, uncomment or create the following three lines and set them all to no:\nPasswordAuthentication no ChallengeResponseAuthentication no UsePAM no Once we’ve done that, we will reload our SSH daemon:\nsystemctl reload sshd We’re done! Now you can log in quickly and password-less-ly to your server, despite the fact that it is now more secure than ever!\nWith these settings, even if a hacker steals or perfectly guesses an account password, they still cannot log in without an approved SSH key!","generate-an-ssh-key-pair#Generate an SSH key pair":"Generating an SSH key is simple. Just run:\nssh-keygen It will prompt you for several options and you can generally chose the default options in each case. It will ask you to optionally include a password on your SSH key. I generally recommend against this unless you happen to be using a computer where you don’t have root access but someone else does (it does minimize the ease of using an SSH key in our case).\nWhat does this SSH key do? Now whenever you use ssh to log into a server, you have the public key of this SSH key pair as your identifier. You can tell your server to trust this key and it will automatically allow password-less logins from this computer.\nBacking up your key We will do that momentarily, but first, I recommend you backup your newly generated key if you plan to use it. If we disable logins to this one key and then lose the key, we might be locked out of our server.\nI suggest copying your entire ~/.ssh/ directory (user-specific) to a USB drive and storing it securely. You may also copy it to the same place on another computer to use the key there.","making-your-server-trust-your-key#Making your server trust your key.":"Now that you have generated an SSH key, just run the following:\nssh-copy-id root@yourdomain.com The command will ask for your server’s root password and log you in briefly. What this does is that it puts your public SSH key fingerprint on your server in a file /root/.ssh/authorized_keys. This file in turn allows approved SSH keys to log in without passwords.\nNote that you can also replace root with a username of an account on the server if you had made a non-root user that you’d like to easily log into as well. For the username user, it will also store the key in /home/user/.ssh/authorized_keys.\nTo test if this has worked, now try logging in normally to your server with ssh:\nssh root@yourdomain.com It should now let you log in without a password prompt!\nIf you find that this does not work try running the following, make sure you are in the directory where the keys where created.\nchmod 700 ~/.ssh/ chmod 644 ~/.ssh/id_rsa.pub chmod 600 ~/.ssh/id_rsa chmod 644 ~/.ssh/authorized_keys For whatever reason these files due not have the correct permissions set, as ssh is very picky about correct file permissions this can cause errors. The above will fix these.","what-if-i-lose-my-ssh-key#What if I lose my SSH key?!":"Firstly, don’t do this. Take every precaution that you have a backup.\nIf this does happen, Vultr and most other VPS providers will have a way out. Log onto their website and select the server you want to log into.\nIn the image above, to the right of your VPS name are a series of icons. Click on the computer screen-like icon which is the leftmost one.\nThis will open up a browser window emulating a terminal and you can always login with your password here, since logins here count as being local—they do not use SSH and therefore can indeed validate with your password even if you have disabled it over SSH.\nFrom here, simply reverse the settings we set above and you can log in via SSH with a password and reapprove a newly created SSH key or whatever you want to do."},"title":"SSH key login"},"/docs/landchad/peertube/":{"data":{"":"PeerTube is a self-hosted and (optionally) federated video sharing\nplatform that saves bandwith on videos the more people watch. PeerTube\ninstances can follow each other to share videos and grow the federated\nnetwork, but you can always keep your instance to yourself if you choose\nto.","certbot#Certbot":"First, we will want a Certbot SSL certificate to encrypt connections to our PeerTube instance. Just run the following:\ncertbot --nginx -d peertube.example.org certonly ","configuration#Configuration":"PeerTube's default config file can be copied over to /var/www/peertube/config/production.yaml so it can actually be used:\nNote that we are still running these as the PeerTube user (having run su -l peertube).\ncd /var/www/peertube cp peertube-latest/config/production.yaml.example config/production.yaml Now the production.yaml file must be edited in the following ways:\nFirst, add the hostname:\nwebserver: https: true hostname: 'example.org' port: 443 Then, the database:\ndatabase: hostname: 'localhost' port: 5432 ssl: false suffix: '_prod' username: 'peertube' password: 'your_password' pool: max: 5 An email to generate the admin user:\nadmin: # Used to generate the root user at first startup # And to receive emails from the contact form email: 'chad@example.org' And optionally, email server information:\nsmtp: # smtp or sendmail transport: smtp # Path to sendmail command. Required if you use sendmail transport sendmail: null hostname: mail.example.org port: 465 # If you use StartTLS: 587 username: your_email_username password: your_email_password tls: true # If you use StartTLS: false disable_starttls: false ca_file: null # Used for self signed certificates from_address: 'admin@example.org' At this point, we have done all we need to do as the PeerTube user. Run exit or press Ctrl-d to log out and return to the root prompt where we will configure Nginx and other system settings.","contribution#Contribution":" Denshi ","database#Database":"PeerTube requires a PostgreSQL database to function. To create it, first make a new Postgres user named PeerTube:\nsu -l postgres createuser -P peertube createdb -O peertube -E UTF8 -T template0 peertube_prod psql -c \"CREATE EXTENSION pg_trgm;\" peertube_prod psql -c \"CREATE EXTENSION unaccent;\" peertube_prod exit Be sure to make note of your Postgres user password, as it will be needed later when setting up PeerTube.","installation#Installation":"Using su -l, we will become the PeerTube user to create the required directories and download and install PeerTube itself with the proper permissions. First, we create the required directories.\nsu -l peertube mkdir config storage versions chmod 750 config Downloading PeerTube Still as the PeerTube user, we can now check for the most recent PeerTube versions number, download and install it in the newly created versiond directory.\nVERSION=$(curl -s https://api.github.com/repos/chocobozzz/peertube/releases/latest | grep tag_name | cut -d '\"' -f 4) cd /var/www/peertube/versions wget \"https://github.com/Chocobozzz/PeerTube/releases/download/${VERSION}/peertube-${VERSION}.zip\" unzip peertube-${VERSION}.zip rm peertube-${VERSION}.zip Installation via Yarn The downloaded release can then be symbolically linked to /var/www/peertube/peertube-latest and yarn is used to install PeerTube:\ncd /var/www/peertube ln -s versions/peertube-${VERSION} ./peertube-latest cd ./peertube-latest yarn install --production --pure-lockfile ","nginx#Nginx":"PeerTube includes an Nginx configuration that can be copied over to /etc/nginx/sites-available:\ncp /var/www/peertube/peertube-latest/support/nginx/peertube /etc/nginx/sites-available/peertube Because the PeerTube config is so long, it's recommended to use sed to modify the contents of the file, replacing ${WEBSERVER_HOST} with your hostname, and $(PEERTUBE_HOST) with your localhost and port, which by default should be 127.0.0.1:9000:\nsed -i 's/${WEBSERVER_HOST}/example.org/g' /etc/nginx/sites-available/peertube sed -i 's/${PEERTUBE_HOST}/127.0.0.1:9000/g' /etc/nginx/sites-available/peertube Once you're happy with the Nginx config file, link it to sites-enabled to activate it:\nln -s /etc/nginx/sites-available/peertube /etc/nginx/sites-enabled/peertube ","note-on-bandwidth#Note on Bandwidth":"Video sharing is the most bandwidth intensive thing on the internet! If you plan on just having a small personal site with a few viewers and friends, that won't be a big concern, but most VPS providers like Vultr have caps on how much bandwidth can be used within a month without being throttled. This level is far beyond what most sites need, but it might be an issue with a video site!\nSo if you plan on having a big video-sharing PeerTube site, it's a good idea to host it with a provider that offers infinite bandwidth. I strongly recommend getting a separate VPS with Frantech/BuyVM. They have unmetered bandwidth, extremely cheap block storage for hosting many, many videos and they even have a good record of being censorship resistant.","prerequisites#Prerequisites":" DebianFedora Most of PeerTube’s dependencies can be installed with this command:\napt install curl unzip vim ffmpeg postgresql postgresql-contrib g++ make redis-server git python-dev cron wget It's also important to start all associated daemons:\nsystemctl start postgresql redis PeerTube also requires NodeJS 14 and yarn which cannot be installed from the Debian repositories. This means they have to be installed from separate, external repos:\ncurl -fsSL https://deb.nodesource.com/setup_14.x | bash - apt install -y nodejs npm install --global yarn PeerTube’s dependencies can be installed with this command:\nsudo dnf install curl unzip vim ffmpeg postgresql postgresql-contrib gcc-c++ make redis git python3-devel cron wget yarnpkg nodejs It's also important to start all associated daemons:\nsystemctl start postgresql redis Now we create a PeerTube user to run and handle PeerTube with the proper permissions:\nuseradd -m -d /var/www/peertube -s /bin/bash -p peertube peertube ","running-peertube#Running PeerTube":"A config file for a systemd daemon is included in PeerTube and can be setup and started like so:\ncp /var/www/peertube/peertube-latest/support/systemd/peertube.service /etc/systemd/system/ systemctl daemon-reload systemctl start peertube PeerTube will take a minute or so to start, but after it does, you can check its status with systemctl status peertube and at this point, your PeerTube site should be live!","updating-peertube#Updating PeerTube":"PeerTube is constantly adding new features, so it's a good idea to check for new updates and add them if you wish. Just in the past year, they have added livestreaming and more.\nUpdating is fairly easy now since an upgrade.sh script has been added. Just run:\ncd /var/www/peertube/peertube-latest/scripts \u0026\u0026 sudo -H -u peertube ./upgrade.sh Although check the changelog to see if there are additional manual requirements for particular updates.","using-peertube#Using PeerTube":"To set a password for your admin user, run:\ncd /var/www/peertube/peertube-latest NODE_CONFIG_DIR=/var/www/peertube/config NODE_ENV=production npm run reset-password -- -u root Login to your PeerTube instance using the admin email specified in your production.yaml file and the admin password you just set.\nOnce logged in, it's recommended to create a separate user without admin privileges for uploading videos to PeerTube. This can be done easily from the users tab in the administration section. Enjoy your PeerTube instance."},"title":"PeerTube"},"/docs/landchad/pleroma/":{"data":{"":"Hopefully by now you won’t have to be sold on the invasive practices that social media companies conduct. Websites such as Facebook and Twitter aquire so much data on users that they often know more about you than you know about yourself. The simple solution to this is to not use social media. However, that just isn’t an option for most people. So the next best thing is to setup a self-hosted and federalised social media site so that you have full control over your data. The contributor previously made a video showing all the steps in depth if you want to check it out. If you run into any issues, it is recommended to look at the video.\nYou’ll need a server or VPS. You’ll also need a domain name pointing to your server’s IP address which is explained in this tutorial.","contribution#Contribution":"If you run into any issues then feel free to checkout the documentation or send the contributor an email or message. Details of the contributor are below.\nMedium YouTube Bitcoin 🪙 1Dmn9jEtWAhdLk1HHWkUVNeDdAaBCwNajm Monero 🪙 84Y4FZiTbLeR5qc1fBrBhB1yq5agKtEdoixq2w1ysXJv486MiBCz3czGT15bqeXDPpdLoNyF93inxY3BCk6g8mrDMNKoArS ","installation#Installation":"Setting Up and Configuring First things first you’ll need to make sure that you’ve hardened you SSH so that password authentication is disabled. There’s a great tutorial on how to do this which can be read here.\n⚠️ You will also want to do some other server-hardening measures with time, especially if your platform were to become mainstream. If there are large amounts of data going in and out of your server on a dynamic platform such as Pleroma, you will want to make sure no malicious data can exploit your system, or your personal data gets extracted without your consent. Explaining this in full detail is beyond the scope of this landchad guide, but you should be able to do this on your own eventually. DebianFedora Next we’ll install the required packages:\napt install curl unzip libncurses5 postgresql postgresql-contrib nginx libmagic-dev Next we’ll install the required packages:\nsudo dnf install curl unzip ncurses-libs postgresql postgresql-contrib nginx file-devel You can manually configure PostgreSQL to suit your system better. Check out the documentation here and then run the below command:\nsystemctl restart postgresql Installing the Pleroma App First as the root user Pleroma is not in the Debian app repositories, so we will install it manually. First create the Pleroma user by running the below command:\nuseradd -m -s /bin/bash -d /opt/pleroma pleroma Then, still as root, we will create the required directories and give the Pleroma user ownership of them.\nmkdir -p /var/lib/pleroma/uploads chown -R pleroma /var/lib/pleroma mkdir -p /var/lib/pleroma/static chown -R pleroma /var/lib/pleroma mkdir -p /etc/pleroma chown -R pleroma /etc/pleroma Now, as the new Pleroma user Now run su -l pleroma to login as the Pleroma user. Now use the curl command below to download the Pleroma software and unzip it.\ncurl 'https://git.pleroma.social/api/v4/projects/2/jobs/artifacts/stable/download?job=amd64' -o /tmp/pleroma.zip unzip /tmp/pleroma.zip -d /tmp/ Note that we are downloading the amd64 version here. If you know you have a different CPU architecture, replace that with whatever your architecture is.\nmv /tmp/release/* /opt/pleroma rmdir /tmp/release rm /tmp/pleroma.zip ./bin/pleroma_ctl instance gen --output /etc/pleroma/config.exs --output-psql /tmp/setup_db.psql We need to briefly return to the root user so we can run the following command (via the postgres user) to set up the database. Type ctrl-d or run exit to return to the root user, then run:\nsu postgres -s $SHELL -lc \"psql -f /tmp/setup_db.psql\" Then return to the pleroma user with su -l pleroma and we will test to see that Pleroma can run:\n./bin/pleroma_ctl migrate ./bin/pleroma daemon That will initialize Pleroma. It might take as long as a minute to get started, so wait a bit, then run the following:\ncurl http://localhost:4000/api/v1/instance If everything is working, this command will give you a long line of messy output. If it is not, you will get a connection error message. Once it is working successfully, stop the Pleroma daemon and we will interface Pleroma with the web server.\n./bin/pleroma stop Setup and Configure Nginx Return again to the root user. Let’s copy Pleroma’s Nginx configuration file from the template given in the installation and enable it:\ncp /opt/pleroma/installation/pleroma.nginx /etc/nginx/sites-available/pleroma.conf ln -s /etc/nginx/sites-available/pleroma.conf /etc/nginx/sites-enabled/pleroma.conf Edit the etc/nginx/sites-available/pleroma.conf file and replace example.tld with your domain name.\nWe now have to get a SSL certificate to enable encryption, since we have a model configuration that already includes SSL information, just use Certbot’s certificates to get the needed certificate. Once you’ve got your cert setup, copy over the Nginx configuration with the below command:\nOnce everything, including your Cerbot certificate is ready, simply reload Nginx with this command:\nsystemctl reload nginx Setting up the service Pleroma itself runs as a systemd service similar to other things running on your server like Nginx. To start the service up run the below commands:\ncp /opt/pleroma/installation/pleroma.service /etc/systemd/system/pleroma.service systemctl start pleroma systemctl enable pleroma If everything worked then when you go to your domain in the web browser you should see a bare-bones Pleroma instance.\nCreating an admin user You’ll be able to create new accounts on the Pleroma instance in the login section on the website but the easiest way to setup an admin account is with the CLI. Simply run the below command replaced with your username:\nsu -l pleroma ./bin/pleroma_ctl user new username username@example.org --admin "},"title":"Pleroma"},"/docs/landprince/":{"data":{"":"While a landchad owns the services he is hosting on the Internet, the landprince is too busy doing more important things to concern himself with Nginx reverse proxies, writing systemd services, and other such banal things. And for what? He is not known for his Internet services. However, he is not an unrefined man: he understands the money he saves by self-hosting, instead of paying for a premium for a service that he can set up himself.","the-answer-iaas#The answer: IaaS":"While hosting in the cloud is indeed not truly self-hosting, since you do not own the hardware that the service runs on, there are still fair reasons to deploy what you want through an infrastructure-as-a-service (IaaS) cloud:\nYou pay only the infrastructure fee that the cloud host asks for, as opposed to third-party services that want payment for… well, the service. You tailor your solutions to what you want. Some cloud solutions are on a consumption basis, rather than provision basis; you pay only for what you use, not simply for the period of provision. Section in development…"},"title":"Landprince"}}